/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.31
 * Generated at: 2018-10-15 05:43:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\">\r\n");
      out.write("  \r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function validate(tag, pwd){\r\n");
      out.write("\tvar result = $('[name='+tag+']').val();\r\n");
      out.write("\tif( tag=='userid' ){\r\n");
      out.write("\t\t//아이디: 영문소문자나 숫자만 사용할 수 있도록 사용가능\r\n");
      out.write("\t\tresult = join.id_status(result);\r\n");
      out.write("\t}else if( tag=='userpwd'){\r\n");
      out.write("\t\tresult = join.pwd_status(result);\r\n");
      out.write("\t}else if( tag==\"userpwd_ck\"){\r\n");
      out.write("\t\tresult = join.pwd_ck_status(result, pwd);\r\n");
      out.write("\t}else if ( tag=='email'){\r\n");
      out.write("\t\tresult = join.email_status(result);\r\n");
      out.write("\t}else if( tag=='birth'){\r\n");
      out.write("\t\tresult = join.birth_status(result);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$('#'+tag+'_status').text( result.desc );\r\n");
      out.write("\t$('#'+tag+'_status').removeClass('valid').removeClass('invalid');\r\n");
      out.write("\t$('#'+tag+'_status').addClass( \r\n");
      out.write("\t\t\tresult.code=='valid' ? 'valid' : 'invalid');\r\n");
      out.write("\treturn result;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function usable(){\r\n");
      out.write("\t//유효한 아이디인경우만 ajax 처리\r\n");
      out.write("// \tvar result = validate('userid');\r\n");
      out.write("// \tif( result.code != 'valid'){\r\n");
      out.write("// \t\talert(result.desc);\r\n");
      out.write("// \t\treturn;\r\n");
      out.write("// \t}\r\n");
      out.write("\tif( !item_check('userid') ) return;\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\ttype:'post',\r\n");
      out.write("\t\tdata: { userid: $('[name=userid]').val() },\r\n");
      out.write("\t\turl: 'id_check',\r\n");
      out.write("\t\tsuccess: function(data){\r\n");
      out.write("\t\t\tvar result = join.id_usable(data);\r\n");
      out.write("\t\t\t$('#userid_status').text(result.desc);\r\n");
      out.write("\t\t\t$('#userid_status').removeClass('valid').removeClass('invalid');\r\n");
      out.write("\t\t\t$('#userid_status').addClass( result.code=='usable' ? 'valid' :'invalid');\r\n");
      out.write("\t\t\t$('#id_check').val(result.code); //usable/usuable\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\terror: function(req, textStatus, error){\r\n");
      out.write("\t\t\talert( textStatus+'('+ req.status+'): '+error);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\t\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/join_valid.js\"></script>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".valid, .invalid { font-size: 9pt; font-weight: bold; }\r\n");
      out.write(".valid { color: green; }\r\n");
      out.write(".invalid { color: red; }\r\n");
      out.write("</style>  \r\n");
      out.write("<script>\"undefined\"==typeof CODE_LIVE&&(!function(e){var t={nonSecure:\"57820\",secure:\"57825\"},c={nonSecure:\"http://\",secure:\"https://\"},r={nonSecure:\"127.0.0.1\",secure:\"gapdebug.local.genuitec.com\"},n=\"https:\"===window.location.protocol?\"secure\":\"nonSecure\";script=e.createElement(\"script\"),script.type=\"text/javascript\",script.async=!0,script.src=c[n]+r[n]+\":\"+t[n]+\"/codelive-assets/bundle.js\",e.getElementsByTagName(\"head\")[0].appendChild(script)}(document),CODE_LIVE=!0);</script></head>\r\n");
      out.write("<body data-genuitec-lp-enabled=\"false\" data-genuitec-file-id=\"wc1-20\" data-genuitec-path=\"/portfolio/src/main/webapp/WEB-INF/views/member/join.jsp\">\r\n");
      out.write("<h3 data-genuitec-lp-enabled=\"false\" data-genuitec-file-id=\"wc1-20\" data-genuitec-path=\"/portfolio/src/main/webapp/WEB-INF/views/member/join.jsp\">회원가입</h3>\r\n");
      out.write("<form method=\"post\" action=\"join\">\r\n");
      out.write("<input type=\"hidden\" id=\"id_check\" value=\"n\"/> <!-- 아이디확인여부저장할 태그 -->\r\n");
      out.write("<table border=\"1\" width=\"570px;\">\r\n");
      out.write("\t<tr><th width=\"150px\">*성명</th>\r\n");
      out.write("\t\t<td class=\"left\"><input type=\"text\" name=\"name\"/></td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr><th>*아이디</th>\r\n");
      out.write("\t\t<td class=\"left\"><input type=\"text\" name=\"userid\" \r\n");
      out.write("\t\t\t\tonkeyup=\"$('#id_check').val('n'); validate('userid')\"/>\r\n");
      out.write("\t\t<input id=\"btn_id\" onclick=\"usable()\" type=\"button\" value=\"중복확인\"/><br>\r\n");
      out.write("\t\t<div class=\"valid\" id=\"userid_status\">아이디를 입력하세요(영문소문자, 숫자만 사용)</div>\t\t\t\t\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr><th>*비밀번호</th>\r\n");
      out.write("\t\t<td class=\"left\"><input onkeyup=\"validate('userpwd')\" type=\"password\" name=\"userpwd\"/>\r\n");
      out.write("\t\t<div class=\"valid\" id=\"userpwd_status\">비밀번호를 입력하세요(영문 대문자,소문자,숫자를 모두 포함)</div>\t\t\t\t\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr><th>*비밀번호확인</th>\r\n");
      out.write("\t\t<td class=\"left\"><input onkeyup=\"validate('userpwd_ck', userpwd.value)\" type=\"password\" name=\"userpwd_ck\"/>\r\n");
      out.write("\t\t<div class=\"valid\" id=\"userpwd_ck_status\">비밀번호를 다시 입력하세요</div>\t\t\t\t\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr><th>*성별</th>\r\n");
      out.write("\t\t<td class=\"left\"><input type=\"radio\" name=\"gender\" \r\n");
      out.write("\t\t\t\tvalue=\"남\" id=\"male\" checked/><label for=\"male\">남</label>\r\n");
      out.write("\t\t\t<input type=\"radio\" name=\"gender\" \r\n");
      out.write("\t\t\t\tvalue=\"여\" id=\"female\"/><label for=\"female\">여</label>\t\t\t\t\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr><th>*이메일</th>\r\n");
      out.write("\t\t<td class=\"left\"><input onkeyup=\"validate('email')\" type=\"text\" name=\"email\" style=\"width: 300px;\"/>\r\n");
      out.write("\t\t<div class=\"valid\" id=\"email_status\">이메일을 입력하세요</div>\t\t\t\t\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr><th>*생년월일</th>\r\n");
      out.write("\t\t<td class=\"left\"><input onchange=\"validate('birth')\" type=\"text\" name=\"birth\"/>\r\n");
      out.write("\t\t<div class=\"valid\" id=\"birth_status\">생년월일을 선택하세요</div>\t\t\t\t\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr><th>연락처</th>\r\n");
      out.write("\t\t<td class=\"left\">\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"phone\" style=\"width: 30px;\" maxlength=\"3\"/>\r\n");
      out.write("\t\t\t- <input type=\"text\" name=\"phone\" style=\"width: 40px;\" maxlength=\"4\"/>\r\n");
      out.write("\t\t\t- <input type=\"text\" name=\"phone\" style=\"width: 40px;\" maxlength=\"4\"/>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("\t<tr><th>주소</th>\r\n");
      out.write("\t\t<td class=\"left\">\r\n");
      out.write("\t\t\t<input type=\"button\" onclick=\"daum_post()\" value=\"우편번호찾기\" style=\"vertical-align:top; height: 28px;\"/>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"post\" style=\"width: 60px;\"/><br>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"address\" style=\"width: 400px;\"/>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"address\" style=\"width: 400px;\"/>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table><br>\r\n");
      out.write("<a class=\"btn-fill\" onclick=\"go_join()\">회원가입</a>\r\n");
      out.write("<a class=\"btn-empty\" onclick=\"history.go(-1)\">취소</a>\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("<script type=\"text/javascript\" \r\n");
      out.write("\tsrc=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function go_join(){\r\n");
      out.write("\t//성명 반드시 입력\r\n");
      out.write("\tif( $('[name=name]').val().trim() =='' ){\r\n");
      out.write("\t\talert(\"성명을 입력하세요\");\r\n");
      out.write("\t\t$('[name=name]').val('');\r\n");
      out.write("\t\t$('[name=name]').focus();\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t//아이디 항목의 유효성 판단\r\n");
      out.write("\t//중복확인하지 않은 경우\r\n");
      out.write("\tif( $('#id_check').val() == 'n'){\r\n");
      out.write("\t\tif( !item_check('userid') ) return;\r\n");
      out.write("\t\telse{\r\n");
      out.write("\t\t\talert( join.id.valid.desc );\r\n");
      out.write("\t\t\t$('#btn_id').focus();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}else if ( $('#id_check').val() == 'unusable' ){\t\r\n");
      out.write("\t//중복확인하여 사용불가인 경우\r\n");
      out.write("\t\talert( join.id.unusable.desc );\r\n");
      out.write("\t\t$('[name=userid]').val('');\r\n");
      out.write("\t\t$('[name=userid]').focus();\r\n");
      out.write("\t\treturn;\t\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//비밀번호 항목\r\n");
      out.write("\tif( ! item_check('userpwd') ) return;\r\n");
      out.write("\t//비밀번호확인 항목\r\n");
      out.write("\tif( ! item_check('userpwd_ck', $('[name=userpwd]').val() ) ) return;\r\n");
      out.write("\t//이메일 항목\r\n");
      out.write("\tif( ! item_check('email') ) return;\r\n");
      out.write("\t//생년월일 항목\r\n");
      out.write("\tif( ! item_check('birth') ) return;\r\n");
      out.write("\t\r\n");
      out.write("\t$('form').submit();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function item_check(item, pwd){\r\n");
      out.write("\tvar result = validate(item, pwd);\r\n");
      out.write("\tif( result.code != 'valid'){\r\n");
      out.write("\t\talert( result.desc );\r\n");
      out.write("\t\t$('[name='+ item +']').val('');\r\n");
      out.write("\t\t$('[name='+ item +']').focus();\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}else\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function daum_post(){\r\n");
      out.write("\tnew daum.Postcode({\r\n");
      out.write("\t\toncomplete:function(data){\r\n");
      out.write("\t\t\tvar full, post;\r\n");
      out.write("\t\t\t//도로명주소(R): roadAddress\r\n");
      out.write("\t\t\t//지번주소(J): jibunAddress\r\n");
      out.write("\t\t\tif( data.userSelectedType == 'J'){\r\n");
      out.write("\t\t\t\tfull = data.jibunAddress;\r\n");
      out.write("\t\t\t\tpost = data.postcode;\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tfull = data.roadAddress;\r\n");
      out.write("\t\t\t\tvar extra;\r\n");
      out.write("\t\t\t\t//법정동명\r\n");
      out.write("\t\t\t\tif( data.bname !='') extra =  data.bname;\r\n");
      out.write("\t\t\t\t//건물명\r\n");
      out.write("\t\t\t\tif( data.buildingName !='' )\r\n");
      out.write("\t\t\t\t\textra += (extra==''?'':', ') + data.buildingName;\r\n");
      out.write("\t\t\t\tif( extra!='') full += ' ('+ extra +')';\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tpost = data.zonecode;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t$('[name=post]').val(post);\r\n");
      out.write("\t\t\t$('[name=address]').eq(0).val(full);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}).open();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$('[name=birth]').datepicker({\r\n");
      out.write("\t\tdateFormat: 'yy-mm-dd',\r\n");
      out.write("\t\tchangeYear: true,\r\n");
      out.write("\t\tchangeMonth: true,\r\n");
      out.write("\t\tdayNamesMin: ['일', '월', '화', '수', '목', '금', '토'],\r\n");
      out.write("\t\tbeforeShowDay: after,\r\n");
      out.write("\t\tmonthNamesShort:['1월','2월','3월','4월','5월','6월',\r\n");
      out.write("\t\t\t\t\t\t'7월','8월','9월','10월','11월','12월' ]\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("//생년월일은 미래날짜 선택불가하게\r\n");
      out.write("function after(date){\r\n");
      out.write("\tif( date > new Date() )\r\n");
      out.write("\t\treturn [false];\r\n");
      out.write("\telse\r\n");
      out.write("\t\treturn [true];\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
